const cron = require('node-cron');
const { exec } = require('child_process');
const path = require('path');

// Charger les variables d'environnement
require('dotenv').config();

// Script pour v√©rifier la configuration des cron jobs
console.log('üîç V√âRIFICATION DE LA CONFIGURATION DES CRON JOBS\n');

// V√©rifier si node-cron est install√©
try {
  require('node-cron');
  const cronPackage = require('./node_modules/node-cron/package.json');
  console.log(`‚úÖ node-cron install√© (version ${cronPackage.version})`);
} catch (error) {
  try {
    // Essayer de l'importer directement
    require('node-cron');
    console.log('‚úÖ node-cron install√© (version inconnue)');
  } catch (err) {
    console.log('‚ùå node-cron n\'est pas install√©');
    console.log('   Installez avec: npm install node-cron');
  }
}

// V√©rifier si nodemailer est install√©
try {
  const nodemailerVersion = require('nodemailer/package.json').version;
  console.log(`‚úÖ nodemailer install√© (version ${nodemailerVersion})`);
} catch (error) {
  console.log('‚ùå nodemailer n\'est pas install√©');
  console.log('   Installez avec: npm install nodemailer');
}

// V√©rifier les variables d'environnement
console.log('\nüìß V√âRIFICATION DE LA CONFIGURATION EMAIL:');
const emailUser = process.env.EMAIL_USER;
const emailPassword = process.env.EMAIL_PASS; // Correction: utiliser EMAIL_PASS au lieu de EMAIL_PASSWORD

if (emailUser) {
  console.log(`‚úÖ EMAIL_USER configur√©: ${emailUser}`);
} else {
  console.log('‚ùå EMAIL_USER non configur√© dans .env');
}

if (emailPassword) {
  console.log('‚úÖ EMAIL_PASS configur√©');
} else {
  console.log('‚ùå EMAIL_PASS non configur√© dans .env');
}

// Tester la validit√© des expressions cron
console.log('\n‚è∞ VALIDATION DES EXPRESSIONS CRON:');

const cronExpressions = [
  { name: 'Toutes les 6 heures (expirations)', expression: '0 */6 * * *' },
  { name: 'Toutes les heures (queue)', expression: '0 * * * *' },
  { name: 'Quotidien √† 3h (nettoyage)', expression: '0 3 * * *' },
  { name: 'Hebdomadaire dimanche √† 2h (m√©triques)', expression: '0 2 * * 0' },
  { name: 'Toutes les 30 minutes (transactions)', expression: '*/30 * * * *' }
];

cronExpressions.forEach(({ name, expression }) => {
  if (cron.validate(expression)) {
    console.log(`‚úÖ ${name}: ${expression}`);
  } else {
    console.log(`‚ùå ${name}: ${expression} - INVALIDE`);
  }
});

// Cr√©er un cron job de test pour 5 secondes
console.log('\nüß™ TEST D\'EX√âCUTION D\'UN CRON JOB:');
console.log('Cr√©ation d\'un cron job de test (ex√©cution dans 5 secondes)...');

let testCounter = 0;
const testCron = cron.schedule('*/5 * * * * *', () => {
  testCounter++;
  console.log(`‚úÖ Cron job de test ex√©cut√© ${testCounter} fois - ${new Date().toLocaleTimeString()}`);
  
  if (testCounter >= 3) {
    testCron.stop();
    console.log('üõë Cron job de test arr√™t√© apr√®s 3 ex√©cutions');
    
    // Afficher le r√©sum√© final
    setTimeout(() => {
      console.log('\nüìã R√âSUM√â DE LA V√âRIFICATION:');
      console.log('‚úÖ Configuration des cron jobs valide');
      console.log('‚úÖ Test d\'ex√©cution r√©ussi');
      console.log('\nüöÄ Vous pouvez maintenant lancer le test complet avec:');
      console.log('   node test-cron-jobs.js');
      process.exit(0);
    }, 1000);
  }
}, {
  scheduled: true
});

testCron.start();

console.log('‚è≥ Attente de l\'ex√©cution du cron job de test...');

// Arr√™ter le test apr√®s 30 secondes au maximum
setTimeout(() => {
  if (testCounter === 0) {
    console.log('‚ùå Aucun cron job ex√©cut√© apr√®s 30 secondes');
    console.log('   V√©rifiez la configuration de node-cron');
  }
  testCron.stop();
  process.exit(0);
}, 30000);
