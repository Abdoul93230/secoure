const fs = require('fs');
const path = require('path');

console.log('üßπ Assistant de nettoyage des fichiers de migration\n');

// Fichiers cr√©√©s pour la migration
const migrationFiles = [
    'migrate_phone_numbers.js',
    'backup_phone_numbers.js', 
    'check_duplicates.js',
    'fix_duplicates.js',
    'MIGRATION_GUIDE.md'
];

// Fichiers de sauvegarde
const backupFiles = [
    'backup_phone_numbers_2025-08-05T13-39-03-627Z.json'
];

// Fichiers de test
const testFiles = [
    'test_login.js',
    'test_model.js'
];

// Autres fichiers
const otherFiles = [
    'App.js',
    'komipay.md',
    'google79b12f86ad29d805.html'
];

function checkFileExists(fileName) {
    return fs.existsSync(fileName);
}

function getFileSize(fileName) {
    if (checkFileExists(fileName)) {
        const stats = fs.statSync(fileName);
        return (stats.size / 1024).toFixed(2) + ' KB';
    }
    return 'N/A';
}

function getFileDate(fileName) {
    if (checkFileExists(fileName)) {
        const stats = fs.statSync(fileName);
        return stats.mtime.toLocaleDateString();
    }
    return 'N/A';
}

console.log('üìã ANALYSE DES FICHIERS:\n');

console.log('üîß FICHIERS DE MIGRATION:');
migrationFiles.forEach(file => {
    if (checkFileExists(file)) {
        console.log(`‚úÖ ${file} (${getFileSize(file)}) - ${getFileDate(file)}`);
    }
});

console.log('\nüíæ FICHIERS DE SAUVEGARDE:');
backupFiles.forEach(file => {
    if (checkFileExists(file)) {
        console.log(`‚úÖ ${file} (${getFileSize(file)}) - ${getFileDate(file)}`);
    }
});

console.log('\nüß™ FICHIERS DE TEST:');
testFiles.forEach(file => {
    if (checkFileExists(file)) {
        console.log(`‚úÖ ${file} (${getFileSize(file)}) - ${getFileDate(file)}`);
    }
});

console.log('\nüìÑ AUTRES FICHIERS:');
otherFiles.forEach(file => {
    if (checkFileExists(file)) {
        console.log(`‚úÖ ${file} (${getFileSize(file)}) - ${getFileDate(file)}`);
    }
});

console.log('\nüìù RECOMMANDATIONS:\n');

console.log('üü¢ GARDER:');
console.log('   ‚úÖ backup_phone_numbers_2025-08-05T13-39-03-627Z.json (sauvegarde importante)');
console.log('   ‚úÖ MIGRATION_GUIDE.md (documentation pour l\'avenir)');
console.log('   ‚úÖ package.json (configuration du projet)');

console.log('\nüü° OPTIONNEL (vous pouvez supprimer):');
console.log('   üóëÔ∏è  migrate_phone_numbers.js (migration termin√©e)');
console.log('   üóëÔ∏è  backup_phone_numbers.js (plus besoin)'); 
console.log('   üóëÔ∏è  check_duplicates.js (diagnostic termin√©)');
console.log('   üóëÔ∏è  fix_duplicates.js (probl√®me r√©solu)');

console.log('\nüî¥ SUPPRIMER SI PLUS N√âCESSAIRE:');
console.log('   üóëÔ∏è  test_login.js (fichier de test)');
console.log('   üóëÔ∏è  test_model.js (fichier de test)');
console.log('   üóëÔ∏è  App.js (d√©pend de votre projet)');

console.log('\nüöÄ Pour supprimer automatiquement les fichiers optionnels:');
console.log('   node cleanup.js --migration-files');
console.log('\nüß™ Pour supprimer les fichiers de test:');
console.log('   node cleanup.js --test-files');
console.log('\n‚ö†Ô∏è  Pour tout supprimer sauf les sauvegardes:');
console.log('   node cleanup.js --all-temp');

// Ex√©cution des suppressions si arguments fournis
if (process.argv.includes('--migration-files')) {
    console.log('\nüóëÔ∏è  Suppression des fichiers de migration...');
    const filesToDelete = ['migrate_phone_numbers.js', 'backup_phone_numbers.js', 'check_duplicates.js', 'fix_duplicates.js'];
    
    filesToDelete.forEach(file => {
        if (checkFileExists(file)) {
            fs.unlinkSync(file);
            console.log(`   ‚úÖ ${file} supprim√©`);
        }
    });
}

if (process.argv.includes('--test-files')) {
    console.log('\nüóëÔ∏è  Suppression des fichiers de test...');
    testFiles.forEach(file => {
        if (checkFileExists(file)) {
            fs.unlinkSync(file);
            console.log(`   ‚úÖ ${file} supprim√©`);
        }
    });
}

if (process.argv.includes('--all-temp')) {
    console.log('\nüóëÔ∏è  Suppression de tous les fichiers temporaires...');
    const allTempFiles = [...migrationFiles.filter(f => f !== 'MIGRATION_GUIDE.md'), ...testFiles];
    
    allTempFiles.forEach(file => {
        if (checkFileExists(file)) {
            fs.unlinkSync(file);
            console.log(`   ‚úÖ ${file} supprim√©`);
        }
    });
}

console.log('\n‚ú® Analyse termin√©e !');
